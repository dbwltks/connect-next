"use client";

import React, { useState, useEffect, useRef } from "react";
import dynamic from "next/dynamic";
import { Section } from "@/components/admin/section-manager";
import { Button } from "@/components/ui/button";
import { Pencil, Save, X, Image, Code, FileText } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { supabase } from "@/db";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Maximize2, Smartphone } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

// TipTap 에디터 컴포넌트
const TipTapEditor = dynamic(() => import("@/components/ui/tiptap-editor"), {
  ssr: false,
  loading: () => <p>에디터 로드중...</p>,
});

interface ContentSectionProps {
  section: Section;
  className?: string;
}

// 일반 콘텐츠 섹션: 단순 텍스트/HTML 예시
export default function ContentSection({
  section,
  className = "",
}: ContentSectionProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [htmlContent, setHtmlContent] = useState("");
  const [richTextContent, setRichTextContent] = useState("");
  const [editedTitle, setEditedTitle] = useState("");
  const [editedDescription, setEditedDescription] = useState("");
  const [isAdmin, setIsAdmin] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [previewTab, setPreviewTab] = useState<"desktop" | "mobile">("desktop");
  const [fullWidth, setFullWidth] = useState(section.full_width === true);
  const [contentType, setContentType] = useState<"html" | "text" | "image">(
    section.content_type || "html"
  );
  const [editMode, setEditMode] = useState<"html" | "normal">("html");
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [popupPreviewTab, setPopupPreviewTab] = useState<"desktop" | "mobile">("desktop");
  const [mobileWidth, setMobileWidth] = useState<string>("375");
  const desktopIframeRef = useRef<HTMLIFrameElement>(null);
  const mobileIframeRef = useRef<HTMLIFrameElement>(null);
  const contentIframeRef = useRef<HTMLIFrameElement>(null);
  const popupDesktopIframeRef = useRef<HTMLIFrameElement>(null);
  const popupMobileIframeRef = useRef<HTMLIFrameElement>(null);
  const { toast } = useToast();

  // 팝업 미리보기 업데이트 함수
  const updatePopupPreview = (mode: "desktop" | "mobile" = "desktop") => {
    // 콘텐츠 타입에 따라 다른 HTML 생성
    let contentHtml = "";

    // 현재 선택된 모드에 따라 콘텐츠 결정
    const currentContent = editMode === "html" ? htmlContent : richTextContent;

    if (contentType === "html") {
      contentHtml = currentContent;
    } else if (contentType === "text") {
      // 텍스트 모드: 줄바꿈을 <p> 태그로 변환
      contentHtml = currentContent
        .split("\n\n")
        .map(
          (paragraph: string) => `<p>${paragraph.replace(/\n/g, "<br>")}</p>`
        )
        .join("");
    } else if (contentType === "image") {
      // 이미지 모드: 이미지 태그로 변환
      contentHtml = `<img src="${currentContent}" alt="콘텐츠 이미지" style="max-width: 100%; height: auto;" />`;
    }

    const baseHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>미리보기</title>
        <script>
          // iframe 높이 자동 조정 스크립트
          window.addEventListener('load', function() {
            const height = document.body.scrollHeight;
            window.parent.postMessage({ type: 'resize', height: height }, '*');
          });
          
          // 이미지 로드 후 높이 재조정
          window.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('img').forEach(img => {
              img.addEventListener('load', function() {
                const height = document.body.scrollHeight;
                window.parent.postMessage({ type: 'resize', height: height }, '*');
              });
            });
          });
        </script>
        <style>
          /* 기본 스타일 */
          html, body {
            height: 100%;
            overflow-x: hidden;
            margin: 0;
            padding: 0;
          }
          body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 100%;
            ${fullWidth ? "width: 100%;" : "width: 100%; max-width: 1200px; margin-left: auto; margin-right: auto;"}
          }
          h1, h2, h3, h4, h5, h6 {
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            font-weight: 600;
            line-height: 1.25;
          }
          h1 { font-size: 2em; }
          h2 { font-size: 1.5em; }
          h3 { font-size: 1.25em; }
          p { margin: 1em 0; }
          a { color: #0070f3; text-decoration: none; }
          a:hover { text-decoration: underline; }
          img { max-width: 100%; height: auto; }
          ul, ol { padding-left: 2em; }
          blockquote {
            margin-left: 0;
            padding-left: 1em;
            border-left: 4px solid #ddd;
            color: #666;
          }
          pre {
            background: #f5f5f5;
            padding: 1em;
            overflow-x: auto;
            border-radius: 4px;
          }
          code {
            background: #f5f5f5;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-size: 0.9em;
          }
          table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 0.5em;
            text-align: left;
          }
          th { background-color: #f5f5f5; }
          .container {
            padding: 1rem;
          }
        </style>
      </head>
      <body>
        <div class="container">
          ${contentHtml}
        </div>
      </body>
      </html>
    `;

    // 팝업 iframe 업데이트 - 모드에 따라 적절한 iframe 선택
    if (mode === "desktop" && popupDesktopIframeRef.current) {
      const popupDoc = popupDesktopIframeRef.current.contentDocument;
      if (popupDoc) {
        popupDoc.open();
        popupDoc.write(baseHtml);
        popupDoc.close();
      }
    } else if (mode === "mobile" && popupMobileIframeRef.current) {
      const popupDoc = popupMobileIframeRef.current.contentDocument;
      if (popupDoc) {
        popupDoc.open();
        popupDoc.write(baseHtml);
        popupDoc.close();
      }
    }
  };

  // iframe 내용 업데이트 함수
  const updateIframeContent = () => {
    // 콘텐츠 타입에 따라 다른 HTML 생성
    let contentHtml = "";

    // 현재 선택된 모드에 따라 콘텐츠 결정
    const currentContent = editMode === "html" ? htmlContent : richTextContent;

    if (contentType === "html") {
      contentHtml = currentContent;
    } else if (contentType === "text") {
      // 텍스트 모드: 줄바꿈을 <p> 태그로 변환
      contentHtml = currentContent
        .split("\n\n")
        .map(
          (paragraph: string) => `<p>${paragraph.replace(/\n/g, "<br>")}</p>`
        )
        .join("");
    } else if (contentType === "image") {
      // 이미지 모드: 이미지 태그로 변환
      contentHtml = `<img src="${currentContent}" alt="콘텐츠 이미지" style="max-width: 100%; height: auto;" />`;
    }

    // 현재 페이지의 스타일시트 가져오기
    const stylesheets = Array.from(document.styleSheets)
      .filter((sheet) => {
        try {
          // CORS 제한으로 접근할 수 없는 스타일시트는 제외
          if (sheet.cssRules) return true;
          return false;
        } catch (e) {
          return false;
        }
      })
      .map((sheet) => {
        try {
          return Array.from(sheet.cssRules)
            .map((rule) => rule.cssText)
            .join("\n");
        } catch (e) {
          return "";
        }
      })
      .filter((css) => css.length > 0)
      .join("\n");

    const baseHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>미리보기</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
        <script>
          // iframe 높이 자동 조정 스크립트
          window.addEventListener('load', function() {
            const height = document.body.scrollHeight;
            window.parent.postMessage({ type: 'resize', height: height }, '*');
          });
          
          // 이미지 로드 후 높이 재조정
          window.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('img').forEach(img => {
              img.addEventListener('load', function() {
                const height = document.body.scrollHeight;
                window.parent.postMessage({ type: 'resize', height: height }, '*');
              });
            });
          });
        </script>
        <style>
          /* 기본 스타일 */
          html, body {
            height: 100%;
            overflow-x: hidden;
            margin: 0;
            padding: 0;
          }
          body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 100%;
            ${fullWidth ? "width: 100%;" : "width: 100%; max-width: 1200px; margin-left: auto; margin-right: auto;"}
          }
          h1, h2, h3, h4, h5, h6 {
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            font-weight: 600;
            line-height: 1.25;
          }
          h1 { font-size: 2em; }
          h2 { font-size: 1.5em; }
          h3 { font-size: 1.25em; }
          p { margin: 1em 0; }
          a { color: #0070f3; text-decoration: none; }
          a:hover { text-decoration: underline; }
          img { max-width: 100%; height: auto; }
          ul, ol { padding-left: 2em; }
          blockquote {
            margin-left: 0;
            padding-left: 1em;
            border-left: 4px solid #ddd;
            color: #666;
          }
          pre {
            background: #f5f5f5;
            padding: 1em;
            overflow-x: auto;
            border-radius: 4px;
          }
          code {
            background: #f5f5f5;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-size: 0.9em;
          }
          table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 0.5em;
            text-align: left;
          }
          th { background-color: #f5f5f5; }
          .container {
            padding: 1rem;
          }
          
          /* 현재 페이지의 모든 스타일 적용 */
          ${stylesheets}
        </style>
      </head>
      <body>
        <div class="container">
          ${contentHtml}
        </div>
      </body>
      </html>
    `;

    // 데스크탑 iframe 업데이트
    if (desktopIframeRef.current) {
      const desktopDoc = desktopIframeRef.current.contentDocument;
      if (desktopDoc) {
        desktopDoc.open();
        desktopDoc.write(baseHtml);
        desktopDoc.close();
      }
    }

    // 모바일 iframe 업데이트
    if (mobileIframeRef.current) {
      const mobileDoc = mobileIframeRef.current.contentDocument;
      if (mobileDoc) {
        mobileDoc.open();
        mobileDoc.write(baseHtml);
        mobileDoc.close();
      }
    }
  };

  // 콘텐츠 변경 시 미리보기 iframe 업데이트
  useEffect(() => {
    if (isEditing) {
      // 현재 탭에 따라 적절한 iframe 업데이트
      if (previewTab === "desktop" && desktopIframeRef.current) {
        updateIframeContent();
      } else if (previewTab === "mobile" && mobileIframeRef.current) {
        updateIframeContent();
      }
      
      // 팝업 미리보기가 열려 있으면 업데이트
      if (isPreviewOpen) {
        updatePopupPreview("desktop");
        updatePopupPreview("mobile");
      }
    }
  }, [
    htmlContent,
    richTextContent,
    isEditing,
    previewTab,
    fullWidth,
    editMode,
    isPreviewOpen,
  ]);
  
  // 팝업이 열릴 때마다 미리보기 업데이트
  useEffect(() => {
    if (isPreviewOpen) {
      setTimeout(() => {
        updatePopupPreview("desktop");
        updatePopupPreview("mobile");
      }, 100);
    }
  }, [isPreviewOpen]);
  
  // 팝업 미리보기의 탭 변경 시 업데이트
  useEffect(() => {
    if (isPreviewOpen) {
      updatePopupPreview(popupPreviewTab);
    }
  }, [popupPreviewTab]);

  // 관리자 여부 확인
  useEffect(() => {
    const checkAdmin = async () => {
      try {
        const {
          data: { session },
        } = await supabase.auth.getSession();
        const isAdmin = !!session?.user?.email;
        setIsAdmin(true); // 테스트를 위해 임시로 true로 설정
      } catch (error) {
        console.error("세션 확인 오류:", error);
      }
    };

    checkAdmin();
  }, []);

  // 일반 보기 모드에서도 iframe 사용하여 콘텐츠 표시
  useEffect(() => {
    const initializeContent = async () => {
      try {
        // 콘텐츠 iframe 설정
        if (contentIframeRef.current) {
          const doc = contentIframeRef.current.contentDocument;
          if (doc) {
            // 콘텐츠 타입에 따라 다른 HTML 생성
            let contentHtml = "";

            if (section.content_type === "text") {
              // 텍스트 모드: 줄바꿈을 <p> 태그로 변환
              contentHtml = (section.content || "")
                .split("\n\n")
                .map(
                  (paragraph) => `<p>${paragraph.replace(/\n/g, "<br>")}</p>`
                )
                .join("");
            } else if (section.content_type === "image") {
              // 이미지 모드: 이미지 태그로 변환
              contentHtml = `<img src="${section.content || ""}" alt="콘텐츠 이미지" style="max-width: 100%; height: auto;" />`;
            } else {
              // HTML 모드 또는 기본값
              contentHtml = section.content || "";
            }

            // 전체 폭 설정에 따라 다른 스타일 적용
            const containerStyle = fullWidth
              ? "width: 100%; max-width: none; margin: 0;"
              : "width: 100%; max-width: 1024px; margin: 0 auto;";

            doc.open();
            doc.write(`
              <!DOCTYPE html>
              <html>
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>콘텐츠</title>
                <script>
                  // iframe 높이 자동 조정 스크립트
                  window.addEventListener('load', function() {
                    const height = document.body.scrollHeight;
                    window.parent.postMessage({ type: 'resize', height: height }, '*');
                  });
                  
                  // 이미지 로드 후 높이 재조정
                  window.addEventListener('DOMContentLoaded', function() {
                    document.querySelectorAll('img').forEach(img => {
                      img.addEventListener('load', function() {
                        const height = document.body.scrollHeight;
                        window.parent.postMessage({ type: 'resize', height: height }, '*');
                      });
                    });
                  });
                </script>
                <style>
                  html, body {
                    margin: 0;
                    padding: 0;
                    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
                    line-height: 1.5;
                    color: #333;
                  }
                  .container {
                    width: 100%;
                    max-width: ${fullWidth ? "none" : "1024px"};
                    margin: ${fullWidth ? "0" : "0 auto"};
                    padding: 1rem;
                    box-sizing: border-box;
                  }
                  img {
                    max-width: 100%;
                    height: auto;
                  }
                  h1, h2, h3, h4, h5, h6 {
                    margin-top: 1.5em;
                    margin-bottom: 0.5em;
                  }
                  p {
                    margin-bottom: 1em;
                  }
                  a {
                    color: #0070f3;
                    text-decoration: none;
                  }
                  a:hover {
                    text-decoration: underline;
                  }
                  pre {
                    background: #f5f5f5;
                    padding: 1rem;
                    border-radius: 0.25rem;
                    overflow-x: auto;
                  }
                  code {
                    font-family: monospace;
                    background: #f5f5f5;
                    padding: 0.2rem 0.4rem;
                    border-radius: 0.25rem;
                  }
                </style>
              </head>
              <body>
                <div class="container">
                  ${contentHtml}
                </div>
              </body>
              </html>
            `);
            doc.close();
          }
        }
      } catch (error) {
        console.error("iframe 콘텐츠 초기화 오류:", error);
      }
    };

    // 컴포넌트가 마운트된 후 실행
    const timer = setTimeout(() => {
      initializeContent();
    }, 100);

    return () => clearTimeout(timer);
  }, [isEditing, section.content, section.content_type, fullWidth]);

  // iframe 크기 자동 조절
  useEffect(() => {
    const handleIframeResize = (event: MessageEvent) => {
      if (event.data && event.data.type === "resize") {
        // 어떤 iframe이 메시지를 보냈는지 확인
        if (contentIframeRef.current && contentIframeRef.current.style) {
          contentIframeRef.current.style.height = `${event.data.height}px`;
        }
        if (
          desktopIframeRef.current &&
          desktopIframeRef.current.style &&
          previewTab === "desktop"
        ) {
          desktopIframeRef.current.style.height = `${event.data.height}px`;
        }
        if (
          mobileIframeRef.current &&
          mobileIframeRef.current.style &&
          previewTab === "mobile"
        ) {
          mobileIframeRef.current.style.height = `${event.data.height}px`;
        }
      }
    };

    window.addEventListener("message", handleIframeResize);
    return () => window.removeEventListener("message", handleIframeResize);
  }, [previewTab]);

  // 전체 폭 설정 변경 시 iframe 업데이트
  useEffect(() => {
    if (!isEditing && contentIframeRef.current) {
      const initContent = async () => {
        // 콘텐츠 타입에 따라 다른 HTML 생성
        let contentHtml = "";

        if (section.content_type === "html") {
          // HTML 모드: 그대로 사용
          contentHtml = section.content || "";
        } else if (section.content_type === "text") {
          // 텍스트 모드: 줄바꿈을 <br>로 변환
          contentHtml = (section.content || "")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/\n/g, "<br />");
        } else if (section.content_type === "image") {
          // 이미지 모드: 이미지 태그로 변환
          contentHtml = `<img src="${section.content || ""}" alt="콘텐츠 이미지" style="max-width: 100%; height: auto;" />`;
        } else {
          // HTML 모드 또는 기본값
          contentHtml =
            section.content ||
            "<p>여기에 자유롭게 HTML 콘텐츠를 입력할 수 있습니다.</p>";
        }

        const contentDoc = contentIframeRef.current.contentDocument;
        if (contentDoc) {
          const baseHtml = `
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>콘텐츠</title>
              <script>
                // iframe 높이 자동 조정 스크립트
                window.addEventListener('load', function() {
                  const height = document.body.scrollHeight;
                  window.parent.postMessage({ type: 'resize', height: height }, '*');
                });
                
                // 이미지 로드 후 높이 재조정
                window.addEventListener('DOMContentLoaded', function() {
                  document.querySelectorAll('img').forEach(img => {
                    img.addEventListener('load', function() {
                      const height = document.body.scrollHeight;
                      window.parent.postMessage({ type: 'resize', height: height }, '*');
                    });
                  });
                });
              </script>
              <style>
                html, body {
                  height: 100%;
                  overflow-x: hidden;
                }
                body {
                  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  line-height: 1.6;
                  padding: 0 max(1rem, env(safe-area-inset-left));
                  margin: 0 auto;
                  color: #333;
                  max-width: 100%;
                  ${fullWidth ? "width: 100%;" : "width: 100%; max-width: 1200px; margin-left: auto; margin-right: auto;"}
                  overflow-x: hidden;
                }
                h1, h2, h3, h4, h5, h6 {
                  margin-top: 1.5em;
                  margin-bottom: 0.5em;
                  font-weight: 600;
                  line-height: 1.25;
                }
                h1 { font-size: 2em; }
                h2 { font-size: 1.5em; }
                h3 { font-size: 1.25em; }
                p { margin: 0.5em 0; }
                a { color: #0070f3; text-decoration: none; }
                a:hover { text-decoration: underline; }
                img { max-width: 100%; height: auto; }
                ul, ol { padding-left: 2em; }
                blockquote {
                  margin-left: 0;
                  padding-left: 1em;
                  border-left: 4px solid #ddd;
                  color: #666;
                }
                pre {
                  background: #f5f5f5;
                  padding: 1em;
                  overflow-x: auto;
                  border-radius: 4px;
                }
                code {
                  background: #f5f5f5;
                  padding: 0.2em 0.4em;
                  border-radius: 3px;
                  font-size: 0.9em;
                }
                table {
                  border-collapse: collapse;
                  width: 100%;
                  margin: 1em 0;
                }
                th, td {
                  border: 1px solid #ddd;
                  padding: 0.5em;
                  text-align: left;
                }
              </style>
            </head>
            <body>
              ${contentHtml}
            </body>
            </html>
          `;

          contentDoc.open();
          contentDoc.write(baseHtml);
          contentDoc.close();
        }
      };

      initContent();
    }
  }, [fullWidth, isEditing, section.content, section.content_type]);

  // 초기 콘텐츠 설정
  const content =
    section.content ||
    "<p>여기에 자유롭게 HTML 콘텐츠를 입력할 수 있습니다.</p>";

  // 관리자 권한 확인
  useEffect(() => {
    // localStorage 또는 sessionStorage에서 사용자 정보 가져오기
    const storedUser =
      localStorage.getItem("user") || sessionStorage.getItem("user");
    if (storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        // 관리자 권한 확인
        const isUserAdmin =
          userData?.role === "admin" ||
          userData?.role === "ADMIN" ||
          String(userData?.role).toLowerCase() === "admin";

        setIsAdmin(isUserAdmin);
      } catch (error) {
        console.error("사용자 정보 파싱 오류:", error);
      }
    }
  }, []);

  // 편집 모드 시작
  const handleEditClick = () => {
    // 편집 모드 설정
    setIsEditing(true);

    // HTML 모드와 일반 글쓰기 모드에 대한 콘텐츠 초기화
    setHtmlContent(section.content || "");
    setRichTextContent(section.content || "");

    // 제목과 설명은 기존 값 유지 (편집 UI에서는 표시하지 않음)
    setEditedTitle(section.title || "");
    setEditedDescription(section.description || "");
    setFullWidth(section.full_width === true);
    setContentType(section.content_type || "html");
    // HTML 콘텐츠인 경우 HTML 모드로, 그 외에는 일반 글쓰기 모드로 설정
    setEditMode(section.content_type === "html" ? "html" : "normal");
    setIsEditing(true);
  };

  // 편집 취소
  const handleCancelClick = () => {
    setIsEditing(false);
    // 원래 콘텐츠로 초기화
    if (section.content) {
      setHtmlContent(section.content);
      setRichTextContent(section.content);
    } else {
      setHtmlContent("");
      setRichTextContent("");
    }
  };

  // 변경 사항 저장
  const handleSaveClick = async () => {
    setIsSaving(true);
    try {
      // 현재 선택된 모드에 따라 저장할 콘텐츠 결정
      const contentToSave = editMode === "html" ? htmlContent : richTextContent;

      // 섹션 업데이트
      const { error } = await supabase
        .from("sections")
        .update({
          content: contentToSave,
          content_type: contentType,
          full_width: fullWidth,
          updated_at: new Date().toISOString(),
        })
        .eq("id", section.id);

      if (error) {
        throw error;
      }

      // 섹션 객체 업데이트
      section.content = contentToSave;
      section.content_type = contentType;
      section.full_width = fullWidth;

      // 두 모드의 콘텐츠 동기화
      setHtmlContent(contentToSave);
      setRichTextContent(contentToSave);

      setIsEditing(false);
      updateIframeContent();

      toast({
        title: "저장 완료",
        description: "콘텐츠가 성공적으로 저장되었습니다.",
        type: "default",
      });
    } catch (error) {
      console.error("Error updating section:", error);
      toast({
        title: "저장 실패",
        description: "콘텐츠 저장 중 오류가 발생했습니다.",
        type: "error",
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="content-section-wrapper">
      {/* 관리자 툴바 - 오른쪽에 버튼 배치 */}
      {isAdmin && !isEditing && (
        <div className="container mx-auto px-4 max-w-screen-lg mb-4">
          <div className="flex justify-end">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                console.log("Edit button clicked");
                setIsEditing(true);
                setHtmlContent(section.content || "");
                setRichTextContent(section.content || "");
                setEditedTitle(section.title || "");
                setEditedDescription(section.description || "");
                setFullWidth(section.full_width === true);
                setContentType(section.content_type || "html");
              }}
              className="flex items-center gap-1"
            >
              <Pencil className="h-4 w-4" />
              편집
            </Button>
          </div>
        </div>
      )}

      <section
        className={`${className} relative ${fullWidth ? "full-width-section" : ""}`}
      >
        {/* 편집 모드 */}
        {isEditing ? (
          <div className="container mx-auto space-y-4 pb-8">
            <div className="flex justify-end gap-2 mb-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsEditing(false)}
                className="flex items-center gap-1"
              >
                <X className="h-4 w-4" />
                취소
              </Button>
              <Button
                variant="default"
                size="sm"
                onClick={handleSaveClick}
                className="flex items-center gap-1"
                disabled={isSaving}
              >
                <Save className="h-4 w-4" />
                {isSaving ? "저장 중..." : "저장"}
              </Button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 mb-4">
              <Card className="overflow-hidden">
                <div className="flex justify-between items-center p-4 border-b">
                  <h3 className="text-sm font-medium">내용 편집</h3>
                  <div className="flex items-center gap-4">
                    <div className="flex items-center gap-2">
                      <input
                        type="checkbox"
                        id="full-width"
                        checked={fullWidth}
                        onChange={(e) => setFullWidth(e.target.checked)}
                        className="h-4 w-4"
                      />
                      <label
                        htmlFor="full-width"
                        className="text-sm font-medium"
                      >
                        전체 폭 사용
                      </label>
                    </div>
                    <Tabs
                      value={editMode}
                      onValueChange={(value) =>
                        setEditMode(value as "html" | "normal")
                      }
                      className="w-auto"
                    >
                      <TabsList className="grid grid-cols-2 w-[180px]">
                        <TabsTrigger value="html">HTML</TabsTrigger>
                        <TabsTrigger value="normal">일반 글쓰기</TabsTrigger>
                      </TabsList>
                    </Tabs>
                  </div>
                </div>
                <div className="p-4">
                  {editMode === "html" ? (
                    <Textarea
                      id="content-html"
                      value={htmlContent}
                      onChange={(e) => setHtmlContent(e.target.value)}
                      placeholder="HTML 콘텐츠를 입력하세요"
                      className="min-h-[400px] text-sm w-full font-mono"
                    />
                  ) : (
                    <div
                      className="rich-text-editor-container"
                      style={{ minHeight: "400px" }}
                    >
                      {typeof window !== "undefined" && (
                        <TipTapEditor
                          content={richTextContent}
                          onChange={setRichTextContent}
                          placeholder="내용을 입력하세요..."
                        />
                      )}
                    </div>
                  )}
                </div>
              </Card>

              <Card className="overflow-hidden">
                <div className="flex justify-between items-center p-4 border-b">
                  <h3 className="text-sm font-medium">미리보기</h3>
                  <div className="flex items-center gap-2">
                    <Dialog open={isPreviewOpen} onOpenChange={(open) => {
                      setIsPreviewOpen(open);
                      if (open) {
                        // 팝업이 열릴 때 즉시 미리보기 업데이트 시도
                        setTimeout(() => {
                          updatePopupPreview();
                        }, 100);
                      }
                    }}>
                      <DialogTrigger asChild>
                        <Button variant="outline" size="sm" className="flex items-center gap-1">
                          <Maximize2 className="h-4 w-4" />
                              title="팝업 데스크톱 미리보기"
                              sandbox="allow-same-origin allow-scripts"
                              onLoad={() => {
                                updatePopupPreview("desktop");
                              }}
                            />
                          </div>
                          
                          {/* 모바일 미리보기 */}
                          <div className={`w-full h-full flex flex-col transition-opacity ${popupPreviewTab === "mobile" ? "opacity-100" : "opacity-0 absolute inset-0 pointer-events-none"}`}>
                            <div className="flex justify-center flex-1">
                              <div className={`h-full border-x border-dashed`} style={{ width: `${mobileWidth}px` }}>
                                <iframe
                                  ref={popupMobileIframeRef}
                                  className="w-full h-full border-0"
                                  title="팝업 모바일 미리보기"
                                  sandbox="allow-same-origin allow-scripts"
                                  onLoad={() => {
                                    updatePopupPreview("mobile");
                                  }}
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      </DialogContent>
                    </Dialog>
                    <Tabs
                      value={previewTab}
                      onValueChange={(value) =>
                        setPreviewTab(value as "desktop" | "mobile")
                      }
                      className="w-auto"
                    >
                      <TabsList className="grid grid-cols-2 w-[180px]">
                        <TabsTrigger value="desktop">데스크톱</TabsTrigger>
                        <TabsTrigger value="mobile">모바일</TabsTrigger>
                      </TabsList>
                    </Tabs>
                  </div>
                </div>

                <CardContent className="p-0 relative">
                  <div className="h-[400px] overflow-hidden">
                    {/* 데스크탑 미리보기 - iframe으로 격리 */}
                    <div
                      className={`w-full h-full transition-opacity ${previewTab === "desktop" ? "opacity-100" : "opacity-0 absolute inset-0 pointer-events-none"}`}
                    >
                      <iframe
                        ref={desktopIframeRef}
                        className="w-full h-full border-0"
                        title="데스크탑 미리보기"
                        sandbox="allow-same-origin"
                      />
                    </div>

                    {/* 모바일 미리보기 - iframe으로 격리 */}
                    <div
                      className={`w-full h-full flex justify-center transition-opacity ${previewTab === "mobile" ? "opacity-100" : "opacity-0 absolute inset-0 pointer-events-none"}`}
                    >
                      <div className={`h-full border-x border-dashed`} style={{ width: `${mobileWidth}px` }}>
                        <iframe
                          ref={mobileIframeRef}
                          className="w-full h-full border-0"
                          title="모바일 미리보기"
                          sandbox="allow-same-origin"
                        />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        ) : (
          // 일반 보기 모드 - iframe으로 격리하여 HTML 콘텐츠 표시
          <div
            className={`content-display w-full overflow-x-hidden ${fullWidth ? "relative w-full" : "container mx-auto flex justify-center"}`}
            style={{ marginTop: 0, marginBottom: 0, padding: 0 }}
          >
            <iframe
              ref={contentIframeRef}
              className="w-full border-0"
              style={{
                minHeight: "100px",
                width: "100%",
                border: "none",
                display: "block",
              }}
              title="콘텐츠"
              sandbox="allow-same-origin allow-scripts"
              scrolling="no"
            />
          </div>
        )}
      </section>
    </div>
  );
}
